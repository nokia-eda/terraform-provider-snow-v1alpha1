// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cluster_incident

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ClusterIncidentDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"api_version": schema.StringAttribute{
				Computed: true,
			},
			"hash": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "resource content will be returned as it was at the time of this git hash",
				MarkdownDescription: "resource content will be returned as it was at the time of this git hash",
			},
			"kind": schema.StringAttribute{
				Computed: true,
			},
			"metadata": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"annotations": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"labels": schema.MapAttribute{
						ElementType: types.StringType,
						Computed:    true,
					},
					"name": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: MetadataType{
					ObjectType: types.ObjectType{
						AttrTypes: MetadataValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "name of the ClusterIncident",
				MarkdownDescription: "name of the ClusterIncident",
			},
			"spec": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"description": schema.StringAttribute{
						Optional:            true,
						Description:         "A short description of the Incident generator",
						MarkdownDescription: "A short description of the Incident generator",
					},
					"enabled": schema.BoolAttribute{
						Optional:            true,
						Description:         "Indicates if the incident generator is enabled",
						MarkdownDescription: "Indicates if the incident generator is enabled",
					},
					"instance": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Description:         "Instances associated with this incident generator",
						MarkdownDescription: "Instances associated with this incident generator",
					},
					"sources": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"query": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"assigned_to": schema.StringAttribute{
										Optional:            true,
										Description:         "The individual assigned to resolve the incident (references the User table).",
										MarkdownDescription: "The individual assigned to resolve the incident (references the User table).",
									},
									"assignment_group": schema.StringAttribute{
										Optional:            true,
										Description:         "The group responsible for addressing the incident (references the Group table).",
										MarkdownDescription: "The group responsible for addressing the incident (references the Group table).",
									},
									"auto_resolve": schema.BoolAttribute{
										Optional:            true,
										Description:         "If true this app will automatically resolve the incident when the object is deleted.",
										MarkdownDescription: "If true this app will automatically resolve the incident when the object is deleted.",
									},
									"caller_id": schema.StringAttribute{
										Optional:            true,
										Description:         "The user who reported the incident (references the User table).",
										MarkdownDescription: "The user who reported the incident (references the User table).",
									},
									"category": schema.StringAttribute{
										Optional:            true,
										Description:         "General category of the incident (e.g., Software, Hardware, Network).",
										MarkdownDescription: "General category of the incident (e.g., Software, Hardware, Network).",
									},
									"close_code": schema.StringAttribute{
										Optional:            true,
										Description:         "A code indicating how the incident was resolved (e.g., Solved (Workaround), Solved (Permanently)).",
										MarkdownDescription: "A code indicating how the incident was resolved (e.g., Solved (Workaround), Solved (Permanently)).",
									},
									"close_notes": schema.StringAttribute{
										Optional:            true,
										Description:         "Notes on how the incident was resolved.",
										MarkdownDescription: "Notes on how the incident was resolved.",
									},
									"cmdbci": schema.StringAttribute{
										Optional:            true,
										Description:         "The Configuration Item (CI) associated with the incident,\nlinking it to an asset or service in the CMDB (Configuration Management Database).",
										MarkdownDescription: "The Configuration Item (CI) associated with the incident,\nlinking it to an asset or service in the CMDB (Configuration Management Database).",
									},
									"custom_fields": schema.ListNestedAttribute{
										NestedObject: schema.NestedAttributeObject{
											Attributes: map[string]schema.Attribute{
												"name": schema.StringAttribute{
													Optional:            true,
													Description:         "Custom field name",
													MarkdownDescription: "Custom field name",
												},
												"value": schema.StringAttribute{
													Optional:            true,
													Description:         "Custom field value, a Go template",
													MarkdownDescription: "Custom field value, a Go template",
												},
											},
											CustomType: CustomFieldsType{
												ObjectType: types.ObjectType{
													AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
												},
											},
										},
										Optional:            true,
										Description:         "List of custom fields to add to the incident",
										MarkdownDescription: "List of custom fields to add to the incident",
									},
									"description": schema.StringAttribute{
										Optional:            true,
										Description:         "A detailed description of the issue.",
										MarkdownDescription: "A detailed description of the issue.",
									},
									"fields": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Description:         "Fields to include in the subscribe results, which can then be used in the template,\ne.g. '.namespace.node.name' or '.namespace.node.srl.interface.name\"'.",
										MarkdownDescription: "Fields to include in the subscribe results, which can then be used in the template,\ne.g. '.namespace.node.name' or '.namespace.node.srl.interface.name\"'.",
									},
									"impact": schema.StringAttribute{
										Optional:            true,
										Description:         "Impact level on the organization, usually from 1 (highest) to 3 (lowest).",
										MarkdownDescription: "Impact level on the organization, usually from 1 (highest) to 3 (lowest).",
									},
									"location": schema.StringAttribute{
										Optional:            true,
										Description:         "Physical or logical location related to the incident.",
										MarkdownDescription: "Physical or logical location related to the incident.",
									},
									"priority": schema.StringAttribute{
										Optional:            true,
										Description:         "Numeric priority of the incident, usually from 1 (highest) to 5 (lowest).",
										MarkdownDescription: "Numeric priority of the incident, usually from 1 (highest) to 5 (lowest).",
									},
									"resolution_code": schema.StringAttribute{
										Optional:            true,
										Description:         "Indicates the type of resolution applied.",
										MarkdownDescription: "Indicates the type of resolution applied.",
									},
									"short_description": schema.StringAttribute{
										Optional:            true,
										Description:         "A Go template used to generate a brief summary of the incident\nwhen raising it in service now.\nThe template can use the fields from the subscription results.\ne.g. 'Interface {{.node.srl.interface.name}} is down on node {{.node.name}}'.",
										MarkdownDescription: "A Go template used to generate a brief summary of the incident\nwhen raising it in service now.\nThe template can use the fields from the subscription results.\ne.g. 'Interface {{.node.srl.interface.name}} is down on node {{.node.name}}'.",
									},
									"state": schema.StringAttribute{
										Optional:            true,
										Description:         "The current status of the incident, typically represented by codes:\n  1: New\n  2: In Progress\n  3: On Hold\n  4: Resolved\n  6: Closed",
										MarkdownDescription: "The current status of the incident, typically represented by codes:\n  1: New\n  2: In Progress\n  3: On Hold\n  4: Resolved\n  6: Closed",
									},
									"sub_category": schema.StringAttribute{
										Optional:            true,
										Description:         "More specific subcategory within the main category.",
										MarkdownDescription: "More specific subcategory within the main category.",
									},
									"table": schema.StringAttribute{
										Optional:            true,
										Description:         "EDB table to subscribe to. e.g. '.namespace.node.srl.interface'",
										MarkdownDescription: "EDB table to subscribe to. e.g. '.namespace.node.srl.interface'",
									},
									"urgency": schema.StringAttribute{
										Optional:            true,
										Description:         "Urgency level, typically from 1 (highest) to 5 (lowest).",
										MarkdownDescription: "Urgency level, typically from 1 (highest) to 5 (lowest).",
									},
									"where": schema.StringAttribute{
										Optional:            true,
										Description:         "A where clause to use for the subscribe request, e.g: 'oper-state = down'. You can omit enclosing parentheses.",
										MarkdownDescription: "A where clause to use for the subscribe request, e.g: 'oper-state = down'. You can omit enclosing parentheses.",
									},
								},
								CustomType: QueryType{
									ObjectType: types.ObjectType{
										AttrTypes: QueryValue{}.AttributeTypes(ctx),
									},
								},
								Optional:            true,
								Description:         "Include a query source in this incident generator",
								MarkdownDescription: "Include a query source in this incident generator",
							},
						},
						CustomType: SourcesType{
							ObjectType: types.ObjectType{
								AttrTypes: SourcesValue{}.AttributeTypes(ctx),
							},
						},
						Optional:            true,
						Description:         "Sources for incident generation",
						MarkdownDescription: "Sources for incident generation",
					},
				},
				CustomType: SpecType{
					ObjectType: types.ObjectType{
						AttrTypes: SpecValue{}.AttributeTypes(ctx),
					},
				},
				Optional:            true,
				Description:         "ClusterIncidentSpec defines the desired state of ClusterIncident",
				MarkdownDescription: "ClusterIncidentSpec defines the desired state of ClusterIncident",
			},
			"status": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{},
				CustomType: StatusType{
					ObjectType: types.ObjectType{
						AttrTypes: StatusValue{}.AttributeTypes(ctx),
					},
				},
				Computed:            true,
				Description:         "ClusterIncidentStatus defines the observed state of ClusterIncident",
				MarkdownDescription: "ClusterIncidentStatus defines the observed state of ClusterIncident",
			},
		},
	}
}

type ClusterIncidentModel struct {
	ApiVersion types.String  `tfsdk:"api_version"`
	Hash       types.String  `tfsdk:"hash"`
	Kind       types.String  `tfsdk:"kind"`
	Metadata   MetadataValue `tfsdk:"metadata"`
	Name       types.String  `tfsdk:"name"`
	Spec       SpecValue     `tfsdk:"spec"`
	Status     StatusValue   `tfsdk:"status"`
}

var _ basetypes.ObjectTypable = MetadataType{}

type MetadataType struct {
	basetypes.ObjectType
}

func (t MetadataType) Equal(o attr.Type) bool {
	other, ok := o.(MetadataType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetadataType) String() string {
	return "MetadataType"
}

func (t MetadataType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return nil, diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return nil, diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueNull() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateNull,
	}
}

func NewMetadataValueUnknown() MetadataValue {
	return MetadataValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetadataValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetadataValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetadataValue Attribute Value",
				"While creating a MetadataValue value, a missing attribute value was detected. "+
					"A MetadataValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetadataValue Attribute Type",
				"While creating a MetadataValue value, an invalid attribute value was detected. "+
					"A MetadataValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetadataValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetadataValue Attribute Value",
				"While creating a MetadataValue value, an extra attribute value was detected. "+
					"A MetadataValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetadataValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	annotationsAttribute, ok := attributes["annotations"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`annotations is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	annotationsVal, ok := annotationsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`annotations expected to be basetypes.MapValue, was: %T`, annotationsAttribute))
	}

	labelsAttribute, ok := attributes["labels"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`labels is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	labelsVal, ok := labelsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`labels expected to be basetypes.MapValue, was: %T`, labelsAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewMetadataValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewMetadataValueUnknown(), diags
	}

	return MetadataValue{
		Annotations: annotationsVal,
		Labels:      labelsVal,
		Name:        nameVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewMetadataValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetadataValue {
	object, diags := NewMetadataValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetadataValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetadataType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetadataValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetadataValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetadataValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetadataValueMust(MetadataValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetadataType) ValueType(ctx context.Context) attr.Value {
	return MetadataValue{}
}

var _ basetypes.ObjectValuable = MetadataValue{}

type MetadataValue struct {
	Annotations basetypes.MapValue    `tfsdk:"annotations"`
	Labels      basetypes.MapValue    `tfsdk:"labels"`
	Name        basetypes.StringValue `tfsdk:"name"`
	state       attr.ValueState
}

func (v MetadataValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["annotations"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["labels"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Annotations.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["annotations"] = val

		val, err = v.Labels.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["labels"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetadataValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetadataValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetadataValue) String() string {
	return "MetadataValue"
}

func (v MetadataValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var annotationsVal basetypes.MapValue
	switch {
	case v.Annotations.IsUnknown():
		annotationsVal = types.MapUnknown(types.StringType)
	case v.Annotations.IsNull():
		annotationsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		annotationsVal, d = types.MapValue(types.StringType, v.Annotations.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	var labelsVal basetypes.MapValue
	switch {
	case v.Labels.IsUnknown():
		labelsVal = types.MapUnknown(types.StringType)
	case v.Labels.IsNull():
		labelsVal = types.MapNull(types.StringType)
	default:
		var d diag.Diagnostics
		labelsVal, d = types.MapValue(types.StringType, v.Labels.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"annotations": basetypes.MapType{
				ElemType: types.StringType,
			},
			"labels": basetypes.MapType{
				ElemType: types.StringType,
			},
			"name": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"annotations": annotationsVal,
			"labels":      labelsVal,
			"name":        v.Name,
		})

	return objVal, diags
}

func (v MetadataValue) Equal(o attr.Value) bool {
	other, ok := o.(MetadataValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Annotations.Equal(other.Annotations) {
		return false
	}

	if !v.Labels.Equal(other.Labels) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v MetadataValue) Type(ctx context.Context) attr.Type {
	return MetadataType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetadataValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"annotations": basetypes.MapType{
			ElemType: types.StringType,
		},
		"labels": basetypes.MapType{
			ElemType: types.StringType,
		},
		"name": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = SpecType{}

type SpecType struct {
	basetypes.ObjectType
}

func (t SpecType) Equal(o attr.Type) bool {
	other, ok := o.(SpecType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SpecType) String() string {
	return "SpecType"
}

func (t SpecType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	instanceAttribute, ok := attributes["instance"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance is missing from object`)

		return nil, diags
	}

	instanceVal, ok := instanceAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance expected to be basetypes.ListValue, was: %T`, instanceAttribute))
	}

	sourcesAttribute, ok := attributes["sources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sources is missing from object`)

		return nil, diags
	}

	sourcesVal, ok := sourcesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sources expected to be basetypes.ObjectValue, was: %T`, sourcesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SpecValue{
		Description: descriptionVal,
		Enabled:     enabledVal,
		Instance:    instanceVal,
		Sources:     sourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueNull() SpecValue {
	return SpecValue{
		state: attr.ValueStateNull,
	}
}

func NewSpecValueUnknown() SpecValue {
	return SpecValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSpecValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SpecValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SpecValue Attribute Value",
				"While creating a SpecValue value, a missing attribute value was detected. "+
					"A SpecValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SpecValue Attribute Type",
				"While creating a SpecValue value, an invalid attribute value was detected. "+
					"A SpecValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SpecValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SpecValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SpecValue Attribute Value",
				"While creating a SpecValue value, an extra attribute value was detected. "+
					"A SpecValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SpecValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	instanceAttribute, ok := attributes["instance"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`instance is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	instanceVal, ok := instanceAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`instance expected to be basetypes.ListValue, was: %T`, instanceAttribute))
	}

	sourcesAttribute, ok := attributes["sources"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sources is missing from object`)

		return NewSpecValueUnknown(), diags
	}

	sourcesVal, ok := sourcesAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sources expected to be basetypes.ObjectValue, was: %T`, sourcesAttribute))
	}

	if diags.HasError() {
		return NewSpecValueUnknown(), diags
	}

	return SpecValue{
		Description: descriptionVal,
		Enabled:     enabledVal,
		Instance:    instanceVal,
		Sources:     sourcesVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewSpecValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SpecValue {
	object, diags := NewSpecValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSpecValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SpecType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSpecValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSpecValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSpecValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSpecValueMust(SpecValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SpecType) ValueType(ctx context.Context) attr.Value {
	return SpecValue{}
}

var _ basetypes.ObjectValuable = SpecValue{}

type SpecValue struct {
	Description basetypes.StringValue `tfsdk:"description"`
	Enabled     basetypes.BoolValue   `tfsdk:"enabled"`
	Instance    basetypes.ListValue   `tfsdk:"instance"`
	Sources     basetypes.ObjectValue `tfsdk:"sources"`
	state       attr.ValueState
}

func (v SpecValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["instance"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["sources"] = basetypes.ObjectType{
		AttrTypes: SourcesValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Instance.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["instance"] = val

		val, err = v.Sources.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sources"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SpecValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SpecValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SpecValue) String() string {
	return "SpecValue"
}

func (v SpecValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var sources basetypes.ObjectValue

	if v.Sources.IsNull() {
		sources = types.ObjectNull(
			SourcesValue{}.AttributeTypes(ctx),
		)
	}

	if v.Sources.IsUnknown() {
		sources = types.ObjectUnknown(
			SourcesValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Sources.IsNull() && !v.Sources.IsUnknown() {
		sources = types.ObjectValueMust(
			SourcesValue{}.AttributeTypes(ctx),
			v.Sources.Attributes(),
		)
	}

	var instanceVal basetypes.ListValue
	switch {
	case v.Instance.IsUnknown():
		instanceVal = types.ListUnknown(types.StringType)
	case v.Instance.IsNull():
		instanceVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		instanceVal, d = types.ListValue(types.StringType, v.Instance.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"description": basetypes.StringType{},
			"enabled":     basetypes.BoolType{},
			"instance": basetypes.ListType{
				ElemType: types.StringType,
			},
			"sources": basetypes.ObjectType{
				AttrTypes: SourcesValue{}.AttributeTypes(ctx),
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"description": basetypes.StringType{},
		"enabled":     basetypes.BoolType{},
		"instance": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sources": basetypes.ObjectType{
			AttrTypes: SourcesValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"description": v.Description,
			"enabled":     v.Enabled,
			"instance":    instanceVal,
			"sources":     sources,
		})

	return objVal, diags
}

func (v SpecValue) Equal(o attr.Value) bool {
	other, ok := o.(SpecValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Instance.Equal(other.Instance) {
		return false
	}

	if !v.Sources.Equal(other.Sources) {
		return false
	}

	return true
}

func (v SpecValue) Type(ctx context.Context) attr.Type {
	return SpecType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SpecValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"description": basetypes.StringType{},
		"enabled":     basetypes.BoolType{},
		"instance": basetypes.ListType{
			ElemType: types.StringType,
		},
		"sources": basetypes.ObjectType{
			AttrTypes: SourcesValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = SourcesType{}

type SourcesType struct {
	basetypes.ObjectType
}

func (t SourcesType) Equal(o attr.Type) bool {
	other, ok := o.(SourcesType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SourcesType) String() string {
	return "SourcesType"
}

func (t SourcesType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return nil, diags
	}

	queryVal, ok := queryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.ObjectValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SourcesValue{
		Query: queryVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSourcesValueNull() SourcesValue {
	return SourcesValue{
		state: attr.ValueStateNull,
	}
}

func NewSourcesValueUnknown() SourcesValue {
	return SourcesValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSourcesValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SourcesValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SourcesValue Attribute Value",
				"While creating a SourcesValue value, a missing attribute value was detected. "+
					"A SourcesValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SourcesValue Attribute Type",
				"While creating a SourcesValue value, an invalid attribute value was detected. "+
					"A SourcesValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SourcesValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SourcesValue Attribute Value",
				"While creating a SourcesValue value, an extra attribute value was detected. "+
					"A SourcesValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SourcesValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSourcesValueUnknown(), diags
	}

	queryAttribute, ok := attributes["query"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`query is missing from object`)

		return NewSourcesValueUnknown(), diags
	}

	queryVal, ok := queryAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`query expected to be basetypes.ObjectValue, was: %T`, queryAttribute))
	}

	if diags.HasError() {
		return NewSourcesValueUnknown(), diags
	}

	return SourcesValue{
		Query: queryVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewSourcesValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SourcesValue {
	object, diags := NewSourcesValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSourcesValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SourcesType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSourcesValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSourcesValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSourcesValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSourcesValueMust(SourcesValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SourcesType) ValueType(ctx context.Context) attr.Value {
	return SourcesValue{}
}

var _ basetypes.ObjectValuable = SourcesValue{}

type SourcesValue struct {
	Query basetypes.ObjectValue `tfsdk:"query"`
	state attr.ValueState
}

func (v SourcesValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["query"] = basetypes.ObjectType{
		AttrTypes: QueryValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.Query.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["query"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SourcesValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SourcesValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SourcesValue) String() string {
	return "SourcesValue"
}

func (v SourcesValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var query basetypes.ObjectValue

	if v.Query.IsNull() {
		query = types.ObjectNull(
			QueryValue{}.AttributeTypes(ctx),
		)
	}

	if v.Query.IsUnknown() {
		query = types.ObjectUnknown(
			QueryValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Query.IsNull() && !v.Query.IsUnknown() {
		query = types.ObjectValueMust(
			QueryValue{}.AttributeTypes(ctx),
			v.Query.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"query": basetypes.ObjectType{
			AttrTypes: QueryValue{}.AttributeTypes(ctx),
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"query": query,
		})

	return objVal, diags
}

func (v SourcesValue) Equal(o attr.Value) bool {
	other, ok := o.(SourcesValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Query.Equal(other.Query) {
		return false
	}

	return true
}

func (v SourcesValue) Type(ctx context.Context) attr.Type {
	return SourcesType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SourcesValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"query": basetypes.ObjectType{
			AttrTypes: QueryValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = QueryType{}

type QueryType struct {
	basetypes.ObjectType
}

func (t QueryType) Equal(o attr.Type) bool {
	other, ok := o.(QueryType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t QueryType) String() string {
	return "QueryType"
}

func (t QueryType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	assignedToAttribute, ok := attributes["assigned_to"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`assigned_to is missing from object`)

		return nil, diags
	}

	assignedToVal, ok := assignedToAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`assigned_to expected to be basetypes.StringValue, was: %T`, assignedToAttribute))
	}

	assignmentGroupAttribute, ok := attributes["assignment_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`assignment_group is missing from object`)

		return nil, diags
	}

	assignmentGroupVal, ok := assignmentGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`assignment_group expected to be basetypes.StringValue, was: %T`, assignmentGroupAttribute))
	}

	autoResolveAttribute, ok := attributes["auto_resolve"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auto_resolve is missing from object`)

		return nil, diags
	}

	autoResolveVal, ok := autoResolveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auto_resolve expected to be basetypes.BoolValue, was: %T`, autoResolveAttribute))
	}

	callerIdAttribute, ok := attributes["caller_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`caller_id is missing from object`)

		return nil, diags
	}

	callerIdVal, ok := callerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`caller_id expected to be basetypes.StringValue, was: %T`, callerIdAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return nil, diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	closeCodeAttribute, ok := attributes["close_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`close_code is missing from object`)

		return nil, diags
	}

	closeCodeVal, ok := closeCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`close_code expected to be basetypes.StringValue, was: %T`, closeCodeAttribute))
	}

	closeNotesAttribute, ok := attributes["close_notes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`close_notes is missing from object`)

		return nil, diags
	}

	closeNotesVal, ok := closeNotesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`close_notes expected to be basetypes.StringValue, was: %T`, closeNotesAttribute))
	}

	cmdbciAttribute, ok := attributes["cmdbci"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cmdbci is missing from object`)

		return nil, diags
	}

	cmdbciVal, ok := cmdbciAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cmdbci expected to be basetypes.StringValue, was: %T`, cmdbciAttribute))
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return nil, diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return nil, diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return nil, diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	impactAttribute, ok := attributes["impact"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`impact is missing from object`)

		return nil, diags
	}

	impactVal, ok := impactAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`impact expected to be basetypes.StringValue, was: %T`, impactAttribute))
	}

	locationAttribute, ok := attributes["location"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`location is missing from object`)

		return nil, diags
	}

	locationVal, ok := locationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`location expected to be basetypes.StringValue, was: %T`, locationAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return nil, diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.StringValue, was: %T`, priorityAttribute))
	}

	resolutionCodeAttribute, ok := attributes["resolution_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resolution_code is missing from object`)

		return nil, diags
	}

	resolutionCodeVal, ok := resolutionCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resolution_code expected to be basetypes.StringValue, was: %T`, resolutionCodeAttribute))
	}

	shortDescriptionAttribute, ok := attributes["short_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`short_description is missing from object`)

		return nil, diags
	}

	shortDescriptionVal, ok := shortDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`short_description expected to be basetypes.StringValue, was: %T`, shortDescriptionAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return nil, diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subCategoryAttribute, ok := attributes["sub_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_category is missing from object`)

		return nil, diags
	}

	subCategoryVal, ok := subCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_category expected to be basetypes.StringValue, was: %T`, subCategoryAttribute))
	}

	tableAttribute, ok := attributes["table"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table is missing from object`)

		return nil, diags
	}

	tableVal, ok := tableAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table expected to be basetypes.StringValue, was: %T`, tableAttribute))
	}

	urgencyAttribute, ok := attributes["urgency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urgency is missing from object`)

		return nil, diags
	}

	urgencyVal, ok := urgencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urgency expected to be basetypes.StringValue, was: %T`, urgencyAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return nil, diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return QueryValue{
		AssignedTo:       assignedToVal,
		AssignmentGroup:  assignmentGroupVal,
		AutoResolve:      autoResolveVal,
		CallerId:         callerIdVal,
		Category:         categoryVal,
		CloseCode:        closeCodeVal,
		CloseNotes:       closeNotesVal,
		Cmdbci:           cmdbciVal,
		CustomFields:     customFieldsVal,
		Description:      descriptionVal,
		Fields:           fieldsVal,
		Impact:           impactVal,
		Location:         locationVal,
		Priority:         priorityVal,
		ResolutionCode:   resolutionCodeVal,
		ShortDescription: shortDescriptionVal,
		State:            stateVal,
		SubCategory:      subCategoryVal,
		Table:            tableVal,
		Urgency:          urgencyVal,
		Where:            whereVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewQueryValueNull() QueryValue {
	return QueryValue{
		state: attr.ValueStateNull,
	}
}

func NewQueryValueUnknown() QueryValue {
	return QueryValue{
		state: attr.ValueStateUnknown,
	}
}

func NewQueryValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (QueryValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing QueryValue Attribute Value",
				"While creating a QueryValue value, a missing attribute value was detected. "+
					"A QueryValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QueryValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid QueryValue Attribute Type",
				"While creating a QueryValue value, an invalid attribute value was detected. "+
					"A QueryValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("QueryValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("QueryValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra QueryValue Attribute Value",
				"While creating a QueryValue value, an extra attribute value was detected. "+
					"A QueryValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra QueryValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewQueryValueUnknown(), diags
	}

	assignedToAttribute, ok := attributes["assigned_to"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`assigned_to is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	assignedToVal, ok := assignedToAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`assigned_to expected to be basetypes.StringValue, was: %T`, assignedToAttribute))
	}

	assignmentGroupAttribute, ok := attributes["assignment_group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`assignment_group is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	assignmentGroupVal, ok := assignmentGroupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`assignment_group expected to be basetypes.StringValue, was: %T`, assignmentGroupAttribute))
	}

	autoResolveAttribute, ok := attributes["auto_resolve"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`auto_resolve is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	autoResolveVal, ok := autoResolveAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`auto_resolve expected to be basetypes.BoolValue, was: %T`, autoResolveAttribute))
	}

	callerIdAttribute, ok := attributes["caller_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`caller_id is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	callerIdVal, ok := callerIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`caller_id expected to be basetypes.StringValue, was: %T`, callerIdAttribute))
	}

	categoryAttribute, ok := attributes["category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`category is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	categoryVal, ok := categoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`category expected to be basetypes.StringValue, was: %T`, categoryAttribute))
	}

	closeCodeAttribute, ok := attributes["close_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`close_code is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	closeCodeVal, ok := closeCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`close_code expected to be basetypes.StringValue, was: %T`, closeCodeAttribute))
	}

	closeNotesAttribute, ok := attributes["close_notes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`close_notes is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	closeNotesVal, ok := closeNotesAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`close_notes expected to be basetypes.StringValue, was: %T`, closeNotesAttribute))
	}

	cmdbciAttribute, ok := attributes["cmdbci"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cmdbci is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	cmdbciVal, ok := cmdbciAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cmdbci expected to be basetypes.StringValue, was: %T`, cmdbciAttribute))
	}

	customFieldsAttribute, ok := attributes["custom_fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`custom_fields is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	customFieldsVal, ok := customFieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`custom_fields expected to be basetypes.ListValue, was: %T`, customFieldsAttribute))
	}

	descriptionAttribute, ok := attributes["description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`description is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	descriptionVal, ok := descriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`description expected to be basetypes.StringValue, was: %T`, descriptionAttribute))
	}

	fieldsAttribute, ok := attributes["fields"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`fields is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	fieldsVal, ok := fieldsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`fields expected to be basetypes.ListValue, was: %T`, fieldsAttribute))
	}

	impactAttribute, ok := attributes["impact"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`impact is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	impactVal, ok := impactAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`impact expected to be basetypes.StringValue, was: %T`, impactAttribute))
	}

	locationAttribute, ok := attributes["location"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`location is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	locationVal, ok := locationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`location expected to be basetypes.StringValue, was: %T`, locationAttribute))
	}

	priorityAttribute, ok := attributes["priority"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`priority is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	priorityVal, ok := priorityAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`priority expected to be basetypes.StringValue, was: %T`, priorityAttribute))
	}

	resolutionCodeAttribute, ok := attributes["resolution_code"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`resolution_code is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	resolutionCodeVal, ok := resolutionCodeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`resolution_code expected to be basetypes.StringValue, was: %T`, resolutionCodeAttribute))
	}

	shortDescriptionAttribute, ok := attributes["short_description"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`short_description is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	shortDescriptionVal, ok := shortDescriptionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`short_description expected to be basetypes.StringValue, was: %T`, shortDescriptionAttribute))
	}

	stateAttribute, ok := attributes["state"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`state is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	stateVal, ok := stateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`state expected to be basetypes.StringValue, was: %T`, stateAttribute))
	}

	subCategoryAttribute, ok := attributes["sub_category"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`sub_category is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	subCategoryVal, ok := subCategoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`sub_category expected to be basetypes.StringValue, was: %T`, subCategoryAttribute))
	}

	tableAttribute, ok := attributes["table"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`table is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	tableVal, ok := tableAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`table expected to be basetypes.StringValue, was: %T`, tableAttribute))
	}

	urgencyAttribute, ok := attributes["urgency"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`urgency is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	urgencyVal, ok := urgencyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`urgency expected to be basetypes.StringValue, was: %T`, urgencyAttribute))
	}

	whereAttribute, ok := attributes["where"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`where is missing from object`)

		return NewQueryValueUnknown(), diags
	}

	whereVal, ok := whereAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`where expected to be basetypes.StringValue, was: %T`, whereAttribute))
	}

	if diags.HasError() {
		return NewQueryValueUnknown(), diags
	}

	return QueryValue{
		AssignedTo:       assignedToVal,
		AssignmentGroup:  assignmentGroupVal,
		AutoResolve:      autoResolveVal,
		CallerId:         callerIdVal,
		Category:         categoryVal,
		CloseCode:        closeCodeVal,
		CloseNotes:       closeNotesVal,
		Cmdbci:           cmdbciVal,
		CustomFields:     customFieldsVal,
		Description:      descriptionVal,
		Fields:           fieldsVal,
		Impact:           impactVal,
		Location:         locationVal,
		Priority:         priorityVal,
		ResolutionCode:   resolutionCodeVal,
		ShortDescription: shortDescriptionVal,
		State:            stateVal,
		SubCategory:      subCategoryVal,
		Table:            tableVal,
		Urgency:          urgencyVal,
		Where:            whereVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewQueryValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) QueryValue {
	object, diags := NewQueryValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewQueryValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t QueryType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewQueryValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewQueryValueUnknown(), nil
	}

	if in.IsNull() {
		return NewQueryValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewQueryValueMust(QueryValue{}.AttributeTypes(ctx), attributes), nil
}

func (t QueryType) ValueType(ctx context.Context) attr.Value {
	return QueryValue{}
}

var _ basetypes.ObjectValuable = QueryValue{}

type QueryValue struct {
	AssignedTo       basetypes.StringValue `tfsdk:"assigned_to"`
	AssignmentGroup  basetypes.StringValue `tfsdk:"assignment_group"`
	AutoResolve      basetypes.BoolValue   `tfsdk:"auto_resolve"`
	CallerId         basetypes.StringValue `tfsdk:"caller_id"`
	Category         basetypes.StringValue `tfsdk:"category"`
	CloseCode        basetypes.StringValue `tfsdk:"close_code"`
	CloseNotes       basetypes.StringValue `tfsdk:"close_notes"`
	Cmdbci           basetypes.StringValue `tfsdk:"cmdbci"`
	CustomFields     basetypes.ListValue   `tfsdk:"custom_fields"`
	Description      basetypes.StringValue `tfsdk:"description"`
	Fields           basetypes.ListValue   `tfsdk:"fields"`
	Impact           basetypes.StringValue `tfsdk:"impact"`
	Location         basetypes.StringValue `tfsdk:"location"`
	Priority         basetypes.StringValue `tfsdk:"priority"`
	ResolutionCode   basetypes.StringValue `tfsdk:"resolution_code"`
	ShortDescription basetypes.StringValue `tfsdk:"short_description"`
	State            basetypes.StringValue `tfsdk:"state"`
	SubCategory      basetypes.StringValue `tfsdk:"sub_category"`
	Table            basetypes.StringValue `tfsdk:"table"`
	Urgency          basetypes.StringValue `tfsdk:"urgency"`
	Where            basetypes.StringValue `tfsdk:"where"`
	state            attr.ValueState
}

func (v QueryValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 21)

	var val tftypes.Value
	var err error

	attrTypes["assigned_to"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["assignment_group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["auto_resolve"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["caller_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["close_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["close_notes"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cmdbci"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["custom_fields"] = basetypes.ListType{
		ElemType: CustomFieldsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["fields"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["impact"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["location"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["priority"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["resolution_code"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["short_description"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["state"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["sub_category"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["table"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["urgency"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["where"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 21)

		val, err = v.AssignedTo.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["assigned_to"] = val

		val, err = v.AssignmentGroup.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["assignment_group"] = val

		val, err = v.AutoResolve.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["auto_resolve"] = val

		val, err = v.CallerId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["caller_id"] = val

		val, err = v.Category.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["category"] = val

		val, err = v.CloseCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["close_code"] = val

		val, err = v.CloseNotes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["close_notes"] = val

		val, err = v.Cmdbci.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cmdbci"] = val

		val, err = v.CustomFields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["custom_fields"] = val

		val, err = v.Description.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["description"] = val

		val, err = v.Fields.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["fields"] = val

		val, err = v.Impact.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["impact"] = val

		val, err = v.Location.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["location"] = val

		val, err = v.Priority.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["priority"] = val

		val, err = v.ResolutionCode.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["resolution_code"] = val

		val, err = v.ShortDescription.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["short_description"] = val

		val, err = v.State.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["state"] = val

		val, err = v.SubCategory.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["sub_category"] = val

		val, err = v.Table.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["table"] = val

		val, err = v.Urgency.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["urgency"] = val

		val, err = v.Where.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["where"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v QueryValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v QueryValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v QueryValue) String() string {
	return "QueryValue"
}

func (v QueryValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	customFields := types.ListValueMust(
		CustomFieldsType{
			basetypes.ObjectType{
				AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
			},
		},
		v.CustomFields.Elements(),
	)

	if v.CustomFields.IsNull() {
		customFields = types.ListNull(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.CustomFields.IsUnknown() {
		customFields = types.ListUnknown(
			CustomFieldsType{
				basetypes.ObjectType{
					AttrTypes: CustomFieldsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	var fieldsVal basetypes.ListValue
	switch {
	case v.Fields.IsUnknown():
		fieldsVal = types.ListUnknown(types.StringType)
	case v.Fields.IsNull():
		fieldsVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		fieldsVal, d = types.ListValue(types.StringType, v.Fields.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"assigned_to":      basetypes.StringType{},
			"assignment_group": basetypes.StringType{},
			"auto_resolve":     basetypes.BoolType{},
			"caller_id":        basetypes.StringType{},
			"category":         basetypes.StringType{},
			"close_code":       basetypes.StringType{},
			"close_notes":      basetypes.StringType{},
			"cmdbci":           basetypes.StringType{},
			"custom_fields": basetypes.ListType{
				ElemType: CustomFieldsValue{}.Type(ctx),
			},
			"description": basetypes.StringType{},
			"fields": basetypes.ListType{
				ElemType: types.StringType,
			},
			"impact":            basetypes.StringType{},
			"location":          basetypes.StringType{},
			"priority":          basetypes.StringType{},
			"resolution_code":   basetypes.StringType{},
			"short_description": basetypes.StringType{},
			"state":             basetypes.StringType{},
			"sub_category":      basetypes.StringType{},
			"table":             basetypes.StringType{},
			"urgency":           basetypes.StringType{},
			"where":             basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"assigned_to":      basetypes.StringType{},
		"assignment_group": basetypes.StringType{},
		"auto_resolve":     basetypes.BoolType{},
		"caller_id":        basetypes.StringType{},
		"category":         basetypes.StringType{},
		"close_code":       basetypes.StringType{},
		"close_notes":      basetypes.StringType{},
		"cmdbci":           basetypes.StringType{},
		"custom_fields": basetypes.ListType{
			ElemType: CustomFieldsValue{}.Type(ctx),
		},
		"description": basetypes.StringType{},
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"impact":            basetypes.StringType{},
		"location":          basetypes.StringType{},
		"priority":          basetypes.StringType{},
		"resolution_code":   basetypes.StringType{},
		"short_description": basetypes.StringType{},
		"state":             basetypes.StringType{},
		"sub_category":      basetypes.StringType{},
		"table":             basetypes.StringType{},
		"urgency":           basetypes.StringType{},
		"where":             basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"assigned_to":       v.AssignedTo,
			"assignment_group":  v.AssignmentGroup,
			"auto_resolve":      v.AutoResolve,
			"caller_id":         v.CallerId,
			"category":          v.Category,
			"close_code":        v.CloseCode,
			"close_notes":       v.CloseNotes,
			"cmdbci":            v.Cmdbci,
			"custom_fields":     customFields,
			"description":       v.Description,
			"fields":            fieldsVal,
			"impact":            v.Impact,
			"location":          v.Location,
			"priority":          v.Priority,
			"resolution_code":   v.ResolutionCode,
			"short_description": v.ShortDescription,
			"state":             v.State,
			"sub_category":      v.SubCategory,
			"table":             v.Table,
			"urgency":           v.Urgency,
			"where":             v.Where,
		})

	return objVal, diags
}

func (v QueryValue) Equal(o attr.Value) bool {
	other, ok := o.(QueryValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AssignedTo.Equal(other.AssignedTo) {
		return false
	}

	if !v.AssignmentGroup.Equal(other.AssignmentGroup) {
		return false
	}

	if !v.AutoResolve.Equal(other.AutoResolve) {
		return false
	}

	if !v.CallerId.Equal(other.CallerId) {
		return false
	}

	if !v.Category.Equal(other.Category) {
		return false
	}

	if !v.CloseCode.Equal(other.CloseCode) {
		return false
	}

	if !v.CloseNotes.Equal(other.CloseNotes) {
		return false
	}

	if !v.Cmdbci.Equal(other.Cmdbci) {
		return false
	}

	if !v.CustomFields.Equal(other.CustomFields) {
		return false
	}

	if !v.Description.Equal(other.Description) {
		return false
	}

	if !v.Fields.Equal(other.Fields) {
		return false
	}

	if !v.Impact.Equal(other.Impact) {
		return false
	}

	if !v.Location.Equal(other.Location) {
		return false
	}

	if !v.Priority.Equal(other.Priority) {
		return false
	}

	if !v.ResolutionCode.Equal(other.ResolutionCode) {
		return false
	}

	if !v.ShortDescription.Equal(other.ShortDescription) {
		return false
	}

	if !v.State.Equal(other.State) {
		return false
	}

	if !v.SubCategory.Equal(other.SubCategory) {
		return false
	}

	if !v.Table.Equal(other.Table) {
		return false
	}

	if !v.Urgency.Equal(other.Urgency) {
		return false
	}

	if !v.Where.Equal(other.Where) {
		return false
	}

	return true
}

func (v QueryValue) Type(ctx context.Context) attr.Type {
	return QueryType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v QueryValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"assigned_to":      basetypes.StringType{},
		"assignment_group": basetypes.StringType{},
		"auto_resolve":     basetypes.BoolType{},
		"caller_id":        basetypes.StringType{},
		"category":         basetypes.StringType{},
		"close_code":       basetypes.StringType{},
		"close_notes":      basetypes.StringType{},
		"cmdbci":           basetypes.StringType{},
		"custom_fields": basetypes.ListType{
			ElemType: CustomFieldsValue{}.Type(ctx),
		},
		"description": basetypes.StringType{},
		"fields": basetypes.ListType{
			ElemType: types.StringType,
		},
		"impact":            basetypes.StringType{},
		"location":          basetypes.StringType{},
		"priority":          basetypes.StringType{},
		"resolution_code":   basetypes.StringType{},
		"short_description": basetypes.StringType{},
		"state":             basetypes.StringType{},
		"sub_category":      basetypes.StringType{},
		"table":             basetypes.StringType{},
		"urgency":           basetypes.StringType{},
		"where":             basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = CustomFieldsType{}

type CustomFieldsType struct {
	basetypes.ObjectType
}

func (t CustomFieldsType) Equal(o attr.Type) bool {
	other, ok := o.(CustomFieldsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CustomFieldsType) String() string {
	return "CustomFieldsType"
}

func (t CustomFieldsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueNull() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateNull,
	}
}

func NewCustomFieldsValueUnknown() CustomFieldsValue {
	return CustomFieldsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCustomFieldsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CustomFieldsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, a missing attribute value was detected. "+
					"A CustomFieldsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CustomFieldsValue Attribute Type",
				"While creating a CustomFieldsValue value, an invalid attribute value was detected. "+
					"A CustomFieldsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CustomFieldsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CustomFieldsValue Attribute Value",
				"While creating a CustomFieldsValue value, an extra attribute value was detected. "+
					"A CustomFieldsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CustomFieldsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewCustomFieldsValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewCustomFieldsValueUnknown(), diags
	}

	return CustomFieldsValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewCustomFieldsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CustomFieldsValue {
	object, diags := NewCustomFieldsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCustomFieldsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CustomFieldsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCustomFieldsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCustomFieldsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCustomFieldsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCustomFieldsValueMust(CustomFieldsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CustomFieldsType) ValueType(ctx context.Context) attr.Value {
	return CustomFieldsValue{}
}

var _ basetypes.ObjectValuable = CustomFieldsValue{}

type CustomFieldsValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v CustomFieldsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CustomFieldsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CustomFieldsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CustomFieldsValue) String() string {
	return "CustomFieldsValue"
}

func (v CustomFieldsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v CustomFieldsValue) Equal(o attr.Value) bool {
	other, ok := o.(CustomFieldsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v CustomFieldsValue) Type(ctx context.Context) attr.Type {
	return CustomFieldsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CustomFieldsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = StatusType{}

type StatusType struct {
	basetypes.ObjectType
}

func (t StatusType) Equal(o attr.Type) bool {
	other, ok := o.(StatusType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t StatusType) String() string {
	return "StatusType"
}

func (t StatusType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	if diags.HasError() {
		return nil, diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueNull() StatusValue {
	return StatusValue{
		state: attr.ValueStateNull,
	}
}

func NewStatusValueUnknown() StatusValue {
	return StatusValue{
		state: attr.ValueStateUnknown,
	}
}

func NewStatusValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (StatusValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing StatusValue Attribute Value",
				"While creating a StatusValue value, a missing attribute value was detected. "+
					"A StatusValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid StatusValue Attribute Type",
				"While creating a StatusValue value, an invalid attribute value was detected. "+
					"A StatusValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("StatusValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("StatusValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra StatusValue Attribute Value",
				"While creating a StatusValue value, an extra attribute value was detected. "+
					"A StatusValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra StatusValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	if diags.HasError() {
		return NewStatusValueUnknown(), diags
	}

	return StatusValue{
		state: attr.ValueStateKnown,
	}, diags
}

func NewStatusValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) StatusValue {
	object, diags := NewStatusValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewStatusValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t StatusType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewStatusValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewStatusValueUnknown(), nil
	}

	if in.IsNull() {
		return NewStatusValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewStatusValueMust(StatusValue{}.AttributeTypes(ctx), attributes), nil
}

func (t StatusType) ValueType(ctx context.Context) attr.Value {
	return StatusValue{}
}

var _ basetypes.ObjectValuable = StatusValue{}

type StatusValue struct {
	state attr.ValueState
}

func (v StatusValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 0)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 0)

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v StatusValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v StatusValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v StatusValue) String() string {
	return "StatusValue"
}

func (v StatusValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{})

	return objVal, diags
}

func (v StatusValue) Equal(o attr.Value) bool {
	other, ok := o.(StatusValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	return true
}

func (v StatusValue) Type(ctx context.Context) attr.Type {
	return StatusType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v StatusValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{}
}
